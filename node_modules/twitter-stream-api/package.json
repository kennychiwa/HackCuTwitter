{
  "_args": [
    [
      {
        "raw": "twitter-stream-api@^0.5.1",
        "scope": null,
        "escapedName": "twitter-stream-api",
        "name": "twitter-stream-api",
        "rawSpec": "^0.5.1",
        "spec": ">=0.5.1 <0.6.0",
        "type": "range"
      },
      "/Users/newuser/Dropbox/github/MyProjects/HackCuTwitter"
    ]
  ],
  "_from": "twitter-stream-api@>=0.5.1 <0.6.0",
  "_id": "twitter-stream-api@0.5.1",
  "_inCache": true,
  "_location": "/twitter-stream-api",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/twitter-stream-api-0.5.1.tgz_1492512675228_0.32453651051037014"
  },
  "_npmUser": {
    "name": "trygve",
    "email": "post@trygve-lie.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "twitter-stream-api@^0.5.1",
    "scope": null,
    "escapedName": "twitter-stream-api",
    "name": "twitter-stream-api",
    "rawSpec": "^0.5.1",
    "spec": ">=0.5.1 <0.6.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/twitter-stream-api/-/twitter-stream-api-0.5.1.tgz",
  "_shasum": "7c55645ce6efb4edb3118bfe74484b95b3f582a5",
  "_shrinkwrap": null,
  "_spec": "twitter-stream-api@^0.5.1",
  "_where": "/Users/newuser/Dropbox/github/MyProjects/HackCuTwitter",
  "author": {
    "name": "Trygve Lie",
    "email": "github@trygve-lie.com"
  },
  "bugs": {
    "url": "https://github.com/trygve-lie/twitter-stream-api/issues"
  },
  "dependencies": {
    "backoff": "2.5.0",
    "backoff-linear-strategy": "1.0.0",
    "core-util-is": "1.0.2",
    "emits": "3.0.0",
    "readable-stream": "2.2.9",
    "request": "2.81.0"
  },
  "description": "A streaming Twitter Stream API client with extended exposure of the underlaying protocol events",
  "devDependencies": {
    "jshint": "2.9.4",
    "nock": "9.0.13",
    "request-debug": "0.2.0",
    "tap": "10.3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "7c55645ce6efb4edb3118bfe74484b95b3f582a5",
    "tarball": "https://registry.npmjs.org/twitter-stream-api/-/twitter-stream-api-0.5.1.tgz"
  },
  "gitHead": "cb378e36fb02a30f0a76891674b752b0c74dc34d",
  "homepage": "https://github.com/trygve-lie/twitter-stream-api#readme",
  "keywords": [
    "twitter",
    "stream"
  ],
  "license": "MIT",
  "main": "lib/main.js",
  "maintainers": [
    {
      "name": "trygve",
      "email": "post@trygve-lie.com"
    }
  ],
  "name": "twitter-stream-api",
  "optionalDependencies": {},
  "readme": "# twitter-stream-api\n\n[![Dependencies](https://img.shields.io/david/trygve-lie/twitter-stream-api.svg?style=flat-square)](https://david-dm.org/trygve-lie/twitter-stream-api)[![Build Status](http://img.shields.io/travis/trygve-lie/twitter-stream-api/master.svg?style=flat-square)](https://travis-ci.org/trygve-lie/twitter-stream-api)\n\n\nA streaming [Twitter Stream API](https://dev.twitter.com/streaming/overview) \nclient with extended exposure of the underlaying protocol events. It does also \nfully adhere to Twitters different reconnect rules.\n\n\n\n## Installation\n\n```bash\n$ npm install twitter-stream-api\n```\n\n\n## Simple stream usage\n\nConnect to the Twitter stream API and listen for messages containing the word \n\"javascript\".\n\n```js\nvar TwitterStream = require('twitter-stream-api'),\n    fs = require('fs');\n\nvar keys = {\n    consumer_key : \"your_consumer_key\",\n    consumer_secret : \"your_consumer_secret\",\n    token : \"your_access_token_key\",\n    token_secret : \"your_access_token_secret\"\n};\n\nvar Twitter = new TwitterStream(keys, false);\nTwitter.stream('statuses/filter', {\n    track: 'javascript'\n});\n\nTwitter.pipe(fs.createWriteStream('tweets.json'));\n```\n\n\n\n## Constructor\n\nCreate a new Twitter Stream API instance.\n\n```js\nvar Twitter = new TwitterStream(keys, [objectMode, options]);\n```\n\n\n### keys (required)\n\nTakes an Object containing your Twitter API keys and access tokens. The Object \nare as follow:\n\n```js\n{\n    consumer_key : \"your_consumer_key\",\n    consumer_secret : \"your_consumer_secret\",\n    token : \"your_access_token_key\",\n    token_secret : \"your_access_token_secret\"\n}\n```\n\nTwitter API keys and tokens can be [generated here](https://apps.twitter.com/).\n\n\n### objectMode (optional)\n\nBoolean value for controlling if the stream should emit Objects or not. Default\nvalue is `true` which set the stream to emit Objects. If a non-object stream is\nwanted, set the value to `false`.\n\n\n### options (optional)\n\nAn Object containing misc configuration. The following values can be provided:\n\n * gzip - Boolean value for enabling / disabling gzip on the connection against Twitter.\n * pool - Sets pool configuration on the underlaying request.js object.\n\nPlease refere to [request.js](https://github.com/request/request) for further\ndocumentation on these cunfiguration options.\n\n\n\n## API\n\nThe Twitter Stream API instance have the following API:\n\n\n### .stream(endpoint, parameters)\n\nOpens a connection to a given stream endpoint.\n\n\n#### endpoint (required)\n\nThe following values can be provided:\n\n * `statuses/filter` [API Doc](https://dev.twitter.com/streaming/reference/post/statuses/filter)\n * `statuses/sample` [API Doc](https://dev.twitter.com/streaming/reference/get/statuses/sample)\n * `statuses/firehose` [API Doc](https://dev.twitter.com/streaming/reference/get/statuses/firehose)\n * `user` [API Doc](https://dev.twitter.com/streaming/reference/get/user)\n * `site` [API Doc](https://dev.twitter.com/streaming/reference/get/site)\n\n\n#### parameters (required)\n\nObject holding optional Twitter Stream API endpoint parameters. The Twitter \nStream API endpoints can take a set of given parameters which can be found in\nthe API documentation for each endpoint.\n\nExample:\n\nThe `statuses/filter` endpoint can take a [`track`](https://dev.twitter.com/streaming/reference/post/statuses/filter)\nparameter for tracking tweets on keywords. The same endpoint can also take a \n`stall_warnings` parameter to include stall warnings in the Twitter stream.\n\nTo track the keyword `javascript` and include stall warnings, do as follow:\n\n```js\nTwitter.stream('statuses/filter', {\n    track: 'javascript',\n    stall_warnings: true\n});\n```\n\nDo note that the `track` and `follow` parameters can take both a comma separated\nlist of values or an Array of values.\n\n```js\nTwitter.stream('statuses/filter', {\n    track: 'javascript,rust'\n});\n```\n\nis the same as:\n\n```js\nTwitter.stream('statuses/filter', {\n    track: ['javascript','rust']\n});\n```\n\n\n### .close()\n\nCloses the connection against the Twitter Stream API.\n\n\n### .debug(callback)\n\nUnder the hood this client use [request](https://github.com/request/request) to\nconnect to the Twitter Stream API. Request have several tools for debugging its\nconnection(s). This method provide access to the underlaying request object so\none can plug in a debugger to [request](https://github.com/request/request).\n\nThe underlaying request object are available as the first argument on the \ncallback.\n\nExample using [request-debug](https://github.com/request/request-debug):\n\n```js\nvar Twitter = new TwitterStream(keys);\n\nTwitter.debug(function (reqObj) {\n    require('request-debug')(reqObj, function (type, data, req) {\n        console.log(type, data, req);\n    });\n});\n```\n\n\n\n## Events\n\ntwitter-stream-api expose a rich set of events making it possible to monitor and\ntake action upon what is going on under the hood. \n\n\n### connection success\n\nEmitted when a successfull connection to the Twitter Stream API are established.\n\n```js\nTwitter.on('connection success', function (uri) {\n    console.log('connection success', uri);\n});\n```\n\n\n### connection aborted\n\nEmitted when a the connection to the Twitter Stream API are taken down / closed.\n\n```js\nTwitter.on('connection aborted', function () {\n    console.log('connection aborted');\n});\n```\n\n\n### connection error network\n\nEmitted when the connection to the Twitter Stream API have TCP/IP level network \nerrors. This error event are normally emitted if there are network level errors\nduring the connection process.\n\n```js\nTwitter.on('connection error network', function (error) {\n    console.log('connection error network', error);\n});\n```\n\nWhen this event is emitted a linear reconnect will start. The reconnect will\nattempt a reconnect after 250 milliseconds and increase the reconnect attempts\nlinearly up to 16 seconds.\n\n\n### connection error stall\n\nEmitted when the connection to the Twitter Stream API have been flagged as stall.\nA stall connection is a connection which have not received any new data or keep \nalive messages from the Twitter Stream API during a period of 90 seconds.\n\nThis error event are normally emitted when a connection have been established\nbut there has been a drop in it after a while.\n\n```js\nTwitter.on('connection error stall', function () {\n    console.log('connection error stall');\n});\n```\n\nWhen this event is emitted a linear reconnect will start. The reconnect will\nattempt a reconnect after 250 milliseconds and increase the reconnect attempts \nlinearly up to 16 seconds.\n\n\n### connection error http\n\nEmitted when the connection to the Twitter Stream API return an HTTP error code.\n\nThis error event are normally emitted if there are HTTP errors during the \nconnection process.\n\n```js\nTwitter.on('connection error http', function (httpStatusCode) {\n    console.log('connection error http', httpStatusCode);\n});\n```\n\nWhen this event is emitted a exponentially reconnect will start. The reconnect \nwill attempt a reconnect after 5 seconds and increase the reconnect attempts\nexponentially up to 320 seconds.\n\n\n### connection rate limit\n\nEmitted when the connection to the Twitter Stream API are being rate limited.\nTwitter does only allow one connection for each application to its Stream API.Multiple connections or to rappid reconnects will cause a rate limiting to \nhappen.\n\n```js\nTwitter.on('connection rate limit', function (httpStatusCode) {\n    console.log('connection rate limit', httpStatusCode);\n});\n```\n\nWhen this event is emitted a exponentially reconnect will start. The reconnect \nwill attempt a reconnect after 1 minute and double the reconnect attempts\nexponentially.\n\n\n### connection error unknown\n\nEmitted when the connection to the Twitter Stream API throw an unexpected error \nwhich are not within the errors defined by the Twitter Stream API documentation.\n\n```js\nTwitter.on('connection error unknown', function (error) {\n    console.log('connection error unknown', error);\n    Twitter.close();\n});\n```\n\nWhen this event is emitted the client will, if it can, keep the connection to\nthe Twitter Stream API and not attemt to reconnect. Closing the connection \nand handling a possilbe reconnect must be handled by the consumer of the client.\n\n\n### data\n\nEmitted when a Tweet ocur in the stream.\n\n```js\nTwitter.on('data', function (obj) {\n    console.log('data', obj);\n});\n```\n\n\n### data keep-alive\n\nEmitted when the client receive a keep alive message from the Twitter Stream API.\nThe Twitter Stream API sends a keep alive message every 30 second if no messages\nhave been sendt to ensure that the connection are kept open. This keep alive\nmessages are mostly being used under the hood to detect stalled connections and\nother connection issues.\n\n```js\nTwitter.on('data keep-alive', function () {\n    console.log('data keep-alive');\n});\n```\n\n\n### data error\n\nEmitted if the client received an message from the Twitter Stream API which the\nclient could not parse into an object or handle in some other way.\n\n```js\nTwitter.on('data error', function (error) {\n    console.log('data error', error);\n});\n```\n\n\n\n## License \n\nThe MIT License (MIT)\n\nCopyright (c) 2015 - Trygve Lie - post@trygve-lie.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/trygve-lie/twitter-stream-api.git"
  },
  "scripts": {
    "pretest": "jshint ./lib/*.js ./test/*.js",
    "test": "tap test/*.js"
  },
  "version": "0.5.1"
}
